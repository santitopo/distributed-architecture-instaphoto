1) Cliente
  a) Conectarse y desconectarse
  b) Registrar un usuario nuevo (user/mail y password)
  c) Login
  d) Ver Lista de usuarios 
  e) Subir una foto
  f) Ver comentarios de una foto
  g) Agregar un comentario a una foto   

  1) Clase Cliente 
    a) Socket client
    b) Conectarse al server
    c) Espera comandos **
    d) Envia comandos **


2) Server Principal

A) Tiene que escuchar conexiones
    1) Clase Sistema
        a) Socket listener
        b) Me voy a poner escuchar pedidos de conexion 
        c) Acepto conexion -> Lanzo nuevo hilo con el socket cliente conectado
        d) Funcion de hilo para manejar la conexion

        void ClientHandler(xxxx) {
            while (systemRunning) {
                //Receive Header
                //Receive Data (si hay)
                //Procesar el comando 
            }
        }

        e) Estructura para el manejo de usuarios (clientes) -> Sockets para los clientes, Hilos para los clientes MUTUOEXCLUIDO

    2) Clase (implementa interfaz) Procesador de Comandos y sus respuestas
        a) identificar el comando
        b) Procesarlo

    3) Package de Comandos
        a) Clase de defincion de largos de las constantes de los comandos
        b) Clase que sabe empaquetar y desempaquetar comandos

    4) Helper class para el envio y recepcion de datos (sockets/wrappers de tcp)

    5) Helper class para el manejo de archivos

 

3) PROTOCOLO

HEADER
XXX YY ZZZZ


XXX -> REQ/RES 
YY  -> COMANDO
ZZZZ -> LARGO DE LOS DATOS


1) Registro de usuario -> cliente a server -> REQ010011pepito#1234  
                       -> server a cliente -> RES010002OK

2) Login -> cliente a server -> REQ020011pepito#1234  
         -> server a cliente -> RES020002OK

3) Lista de usuarios -> cliente a server -> REQ030000
                     -> server a cliente -> RES030016PEPE%JOSE%PEPITO


NO SE PUEDE
-----------

try {

} catch (Excption e) {
    //GRILLOS
}


while(systemRunning) {
    //hago algo forever
}